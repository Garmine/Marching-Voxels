#include <stdlib.h>
#include <stdio.h>
#include <math.h>

#define GLEW_STATIC
#include <GL/glew.h>
#include <GLFW/glfw3.h>

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

using namespace glm;

extern "C"{

typedef unsigned int uint;
typedef struct{
	GLint location;
	GLuint buffer;
	GLuint texture;
	GLint textureID;
	GLenum format;
	GLenum usage;
	size_t size;
	void* data;
} TexBuffer;

int init();
void render(GLint n);
GLuint makeShader(const char*, GLenum);
GLuint makeProgram(GLuint*);
void printProgramLog(GLuint program);
int validateProgram(GLuint program);
int printGLError();
float* getWorldMatrix();
//TODO: process input from GLFW

//Size of a cube divided by 2
#define CUBE_SIZE 0.5f

//Edges of a cube:    X           Y           Z         edge#
#define EDGE_00 {-CUBE_SIZE,          0, +CUBE_SIZE}	// 00
#define EDGE_01 {         0, +CUBE_SIZE, +CUBE_SIZE}	// 01
#define EDGE_02 {+CUBE_SIZE,          0, +CUBE_SIZE}	// 02
#define EDGE_03 {         0, -CUBE_SIZE, +CUBE_SIZE}	// 03
#define EDGE_04 {-CUBE_SIZE,          0, -CUBE_SIZE}	// 04
#define EDGE_05 {         0, +CUBE_SIZE, -CUBE_SIZE}	// 05
#define EDGE_06 {+CUBE_SIZE,          0, -CUBE_SIZE}	// 06
#define EDGE_07 {         0, -CUBE_SIZE, -CUBE_SIZE}	// 07
#define EDGE_08 {-CUBE_SIZE, -CUBE_SIZE,          0}	// 08
#define EDGE_09 {-CUBE_SIZE, +CUBE_SIZE,          0}	// 09
#define EDGE_10 {+CUBE_SIZE, +CUBE_SIZE,          0}	// 10
#define EDGE_11 {+CUBE_SIZE, -CUBE_SIZE,          0}	// 11

//null-vertex
#define V000000 {0, 0, 0}

//256 configurations, max 5 triangles, 3 vertices/triangle, 3 floats/vertex, 4 bytes/float => 46080 bytes = 45KB
//The final 3-vectors are actually transition vectors.
GLfloat marchingCubesData[256][5*3][3] = {
//     indices        <-------triangle-0------>  <-------triangle-1------>  <-------triangle-2------>  <-------triangle-3------>  <-------triangle-4------>
/* 000 | 00000000 */ {V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 001 | 00000001 */ {EDGE_03, EDGE_00, EDGE_08, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 002 | 00000010 */ {EDGE_01, EDGE_09, EDGE_00, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 003 | 00000011 */ {EDGE_03, EDGE_09, EDGE_08, EDGE_03, EDGE_01, EDGE_09, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 004 | 00000100 */ {EDGE_10, EDGE_01, EDGE_02, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 005 | 00000101 */ {EDGE_10, EDGE_01, EDGE_02, EDGE_00, EDGE_08, EDGE_03, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 006 | 00000110 */ {EDGE_10, EDGE_00, EDGE_02, EDGE_10, EDGE_09, EDGE_00, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 007 | 00000111 */ {EDGE_02, EDGE_08, EDGE_03, EDGE_02, EDGE_10, EDGE_08, EDGE_10, EDGE_09, EDGE_08, V000000, V000000, V000000, V000000, V000000, V000000},
/* 008 | 00001000 */ {EDGE_11, EDGE_02, EDGE_03, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 009 | 00001001 */ {EDGE_02, EDGE_08, EDGE_11, EDGE_02, EDGE_00, EDGE_08, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 010 | 00001010 */ {EDGE_11, EDGE_02, EDGE_03, EDGE_01, EDGE_09, EDGE_00, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 011 | 00001011 */ {EDGE_01, EDGE_11, EDGE_02, EDGE_01, EDGE_09, EDGE_11, EDGE_09, EDGE_08, EDGE_11, V000000, V000000, V000000, V000000, V000000, V000000},
/* 012 | 00001100 */ {EDGE_11, EDGE_01, EDGE_03, EDGE_11, EDGE_10, EDGE_01, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 013 | 00001101 */ {EDGE_00, EDGE_10, EDGE_01, EDGE_00, EDGE_08, EDGE_10, EDGE_08, EDGE_11, EDGE_10, V000000, V000000, V000000, V000000, V000000, V000000},
/* 014 | 00001110 */ {EDGE_03, EDGE_09, EDGE_00, EDGE_03, EDGE_11, EDGE_09, EDGE_11, EDGE_10, EDGE_09, V000000, V000000, V000000, V000000, V000000, V000000},
/* 015 | 00001111 */ {EDGE_09, EDGE_08, EDGE_10, EDGE_10, EDGE_08, EDGE_11, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 016 | 00010000 */ {EDGE_08, EDGE_04, EDGE_07, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 017 | 00010001 */ {EDGE_00, EDGE_07, EDGE_03, EDGE_00, EDGE_04, EDGE_07, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 018 | 00010010 */ {EDGE_01, EDGE_09, EDGE_00, EDGE_04, EDGE_07, EDGE_08, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 019 | 00010011 */ {EDGE_04, EDGE_01, EDGE_09, EDGE_04, EDGE_07, EDGE_01, EDGE_07, EDGE_03, EDGE_01, V000000, V000000, V000000, V000000, V000000, V000000},
/* 020 | 00010100 */ {EDGE_08, EDGE_04, EDGE_07, EDGE_10, EDGE_01, EDGE_02, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 021 | 00010101 */ {EDGE_07, EDGE_00, EDGE_04, EDGE_07, EDGE_03, EDGE_00, EDGE_02, EDGE_10, EDGE_01, V000000, V000000, V000000, V000000, V000000, V000000},
/* 022 | 00010110 */ {EDGE_10, EDGE_00, EDGE_02, EDGE_10, EDGE_09, EDGE_00, EDGE_04, EDGE_07, EDGE_08, V000000, V000000, V000000, V000000, V000000, V000000},
/* 023 | 00010111 */ {EDGE_09, EDGE_04, EDGE_10, EDGE_10, EDGE_04, EDGE_07, EDGE_10, EDGE_07, EDGE_02, EDGE_02, EDGE_07, EDGE_03, V000000, V000000, V000000},
/* 024 | 00011000 */ {EDGE_04, EDGE_07, EDGE_08, EDGE_11, EDGE_02, EDGE_03, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 025 | 00011001 */ {EDGE_11, EDGE_04, EDGE_07, EDGE_11, EDGE_02, EDGE_04, EDGE_02, EDGE_00, EDGE_04, V000000, V000000, V000000, V000000, V000000, V000000},
/* 026 | 00011010 */ {EDGE_09, EDGE_00, EDGE_01, EDGE_03, EDGE_11, EDGE_02, EDGE_06, EDGE_08, EDGE_04, V000000, V000000, V000000, V000000, V000000, V000000},
/* 027 | 00011011 */ {EDGE_02, EDGE_01, EDGE_11, EDGE_11, EDGE_01, EDGE_09, EDGE_11, EDGE_09, EDGE_07, EDGE_07, EDGE_09, EDGE_04, V000000, V000000, V000000},
/* 028 | 00011100 */ {EDGE_01, EDGE_11, EDGE_10, EDGE_01, EDGE_03, EDGE_11, EDGE_08, EDGE_04, EDGE_07, V000000, V000000, V000000, V000000, V000000, V000000},
/* 029 | 00011101 */ {EDGE_10, EDGE_07, EDGE_11, EDGE_10, EDGE_04, EDGE_07, EDGE_10, EDGE_01, EDGE_04, EDGE_01, EDGE_00, EDGE_04, V000000, V000000, V000000},
/* 030 | 00011110 */ {EDGE_03, EDGE_09, EDGE_00, EDGE_03, EDGE_11, EDGE_09, EDGE_11, EDGE_10, EDGE_09, EDGE_00, EDGE_07, EDGE_08, V000000, V000000, V000000},
/* 031 | 00011111 */ {EDGE_11, EDGE_10, EDGE_09, EDGE_11, EDGE_09, EDGE_04, EDGE_07, EDGE_11, EDGE_04, V000000, V000000, V000000, V000000, V000000, V000000},
/* 032 | 00100000 */ {EDGE_09, EDGE_05, EDGE_04, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 033 | 00100001 */ {EDGE_03, EDGE_00, EDGE_08, EDGE_09, EDGE_05, EDGE_04, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 034 | 00100010 */ {EDGE_01, EDGE_04, EDGE_00, EDGE_01, EDGE_05, EDGE_04, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 035 | 00100011 */ {EDGE_08, EDGE_05, EDGE_04, EDGE_08, EDGE_03, EDGE_05, EDGE_03, EDGE_01, EDGE_05, V000000, V000000, V000000, V000000, V000000, V000000},
/* 036 | 00100100 */ {EDGE_04, EDGE_09, EDGE_05, EDGE_01, EDGE_02, EDGE_10, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 037 | 00100101 */ {EDGE_03, EDGE_00, EDGE_08, EDGE_09, EDGE_05, EDGE_04, EDGE_06, EDGE_01, EDGE_02, V000000, V000000, V000000, V000000, V000000, V000000},
/* 038 | 00100110 */ {EDGE_05, EDGE_02, EDGE_10, EDGE_05, EDGE_04, EDGE_02, EDGE_04, EDGE_00, EDGE_02, V000000, V000000, V000000, V000000, V000000, V000000},
/* 039 | 00100111 */ {EDGE_04, EDGE_08, EDGE_05, EDGE_05, EDGE_08, EDGE_03, EDGE_05, EDGE_03, EDGE_10, EDGE_10, EDGE_03, EDGE_02, V000000, V000000, V000000},
/* 040 | 00101000 */ {EDGE_11, EDGE_02, EDGE_03, EDGE_09, EDGE_05, EDGE_04, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 041 | 00101001 */ {EDGE_02, EDGE_08, EDGE_11, EDGE_02, EDGE_00, EDGE_08, EDGE_09, EDGE_05, EDGE_04, V000000, V000000, V000000, V000000, V000000, V000000},
/* 042 | 00101010 */ {EDGE_04, EDGE_01, EDGE_05, EDGE_04, EDGE_00, EDGE_01, EDGE_03, EDGE_11, EDGE_02, V000000, V000000, V000000, V000000, V000000, V000000},
/* 043 | 00101011 */ {EDGE_05, EDGE_02, EDGE_01, EDGE_05, EDGE_11, EDGE_02, EDGE_05, EDGE_04, EDGE_11, EDGE_04, EDGE_08, EDGE_11, V000000, V000000, V000000},
/* 044 | 00101100 */ {EDGE_11, EDGE_01, EDGE_03, EDGE_11, EDGE_10, EDGE_01, EDGE_05, EDGE_04, EDGE_09, V000000, V000000, V000000, V000000, V000000, V000000},
/* 045 | 00101101 */ {EDGE_00, EDGE_10, EDGE_01, EDGE_00, EDGE_08, EDGE_10, EDGE_08, EDGE_11, EDGE_10, EDGE_01, EDGE_04, EDGE_09, V000000, V000000, V000000},
/* 046 | 00101110 */ {EDGE_00, EDGE_03, EDGE_04, EDGE_04, EDGE_03, EDGE_11, EDGE_04, EDGE_11, EDGE_05, EDGE_05, EDGE_11, EDGE_10, V000000, V000000, V000000},
/* 047 | 00101111 */ {EDGE_08, EDGE_11, EDGE_10, EDGE_08, EDGE_10, EDGE_05, EDGE_04, EDGE_08, EDGE_05, V000000, V000000, V000000, V000000, V000000, V000000},
/* 048 | 00110000 */ {EDGE_08, EDGE_05, EDGE_07, EDGE_08, EDGE_09, EDGE_05, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 049 | 00110001 */ {EDGE_09, EDGE_03, EDGE_00, EDGE_09, EDGE_05, EDGE_03, EDGE_05, EDGE_07, EDGE_03, V000000, V000000, V000000, V000000, V000000, V000000},
/* 050 | 00110010 */ {EDGE_00, EDGE_07, EDGE_08, EDGE_00, EDGE_01, EDGE_07, EDGE_01, EDGE_05, EDGE_07, V000000, V000000, V000000, V000000, V000000, V000000},
/* 051 | 00110011 */ {EDGE_05, EDGE_07, EDGE_01, EDGE_01, EDGE_07, EDGE_03, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 052 | 00110100 */ {EDGE_08, EDGE_05, EDGE_07, EDGE_08, EDGE_09, EDGE_05, EDGE_01, EDGE_02, EDGE_10, V000000, V000000, V000000, V000000, V000000, V000000},
/* 053 | 00110101 */ {EDGE_09, EDGE_03, EDGE_00, EDGE_09, EDGE_05, EDGE_03, EDGE_05, EDGE_07, EDGE_03, EDGE_00, EDGE_10, EDGE_01, V000000, V000000, V000000},
/* 054 | 00110110 */ {EDGE_07, EDGE_10, EDGE_05, EDGE_07, EDGE_02, EDGE_10, EDGE_07, EDGE_08, EDGE_02, EDGE_08, EDGE_00, EDGE_02, V000000, V000000, V000000},
/* 055 | 00110111 */ {EDGE_05, EDGE_07, EDGE_03, EDGE_05, EDGE_03, EDGE_02, EDGE_10, EDGE_05, EDGE_02, V000000, V000000, V000000, V000000, V000000, V000000},
/* 056 | 00111000 */ {EDGE_05, EDGE_08, EDGE_09, EDGE_05, EDGE_07, EDGE_08, EDGE_11, EDGE_02, EDGE_03, V000000, V000000, V000000, V000000, V000000, V000000},
/* 057 | 00111001 */ {EDGE_00, EDGE_09, EDGE_02, EDGE_02, EDGE_09, EDGE_05, EDGE_02, EDGE_05, EDGE_11, EDGE_11, EDGE_05, EDGE_07, V000000, V000000, V000000},
/* 058 | 00111010 */ {EDGE_00, EDGE_07, EDGE_08, EDGE_00, EDGE_01, EDGE_07, EDGE_01, EDGE_05, EDGE_07, EDGE_08, EDGE_02, EDGE_03, V000000, V000000, V000000},
/* 059 | 00111011 */ {EDGE_01, EDGE_05, EDGE_07, EDGE_01, EDGE_07, EDGE_11, EDGE_02, EDGE_01, EDGE_11, V000000, V000000, V000000, V000000, V000000, V000000},
/* 060 | 00111100 */ {EDGE_08, EDGE_05, EDGE_07, EDGE_08, EDGE_09, EDGE_05, EDGE_03, EDGE_11, EDGE_10, EDGE_03, EDGE_10, EDGE_01, V000000, V000000, V000000},
/* 061 | 00111101 */ {EDGE_09, EDGE_08, EDGE_00, EDGE_00, EDGE_08, EDGE_07, EDGE_00, EDGE_07, EDGE_11, EDGE_00, EDGE_11, EDGE_10, EDGE_00, EDGE_10, EDGE_01},
/* 062 | 00111110 */ {EDGE_03, EDGE_01, EDGE_00, EDGE_00, EDGE_01, EDGE_10, EDGE_00, EDGE_10, EDGE_05, EDGE_00, EDGE_05, EDGE_07, EDGE_00, EDGE_07, EDGE_08},
/* 063 | 00111111 */ {EDGE_10, EDGE_05, EDGE_07, EDGE_11, EDGE_10, EDGE_07, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 064 | 01000000 */ {EDGE_05, EDGE_10, EDGE_06, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 065 | 01000001 */ {EDGE_03, EDGE_00, EDGE_08, EDGE_05, EDGE_10, EDGE_06, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 066 | 01000010 */ {EDGE_00, EDGE_01, EDGE_09, EDGE_10, EDGE_06, EDGE_05, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 067 | 01000011 */ {EDGE_03, EDGE_09, EDGE_08, EDGE_03, EDGE_01, EDGE_09, EDGE_10, EDGE_06, EDGE_05, V000000, V000000, V000000, V000000, V000000, V000000},
/* 068 | 01000100 */ {EDGE_05, EDGE_02, EDGE_06, EDGE_05, EDGE_01, EDGE_02, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 069 | 01000101 */ {EDGE_05, EDGE_02, EDGE_06, EDGE_05, EDGE_01, EDGE_02, EDGE_00, EDGE_08, EDGE_03, V000000, V000000, V000000, V000000, V000000, V000000},
/* 070 | 01000110 */ {EDGE_09, EDGE_06, EDGE_05, EDGE_09, EDGE_00, EDGE_06, EDGE_00, EDGE_02, EDGE_06, V000000, V000000, V000000, V000000, V000000, V000000},
/* 071 | 01000111 */ {EDGE_08, EDGE_05, EDGE_09, EDGE_08, EDGE_06, EDGE_05, EDGE_08, EDGE_03, EDGE_06, EDGE_03, EDGE_02, EDGE_06, V000000, V000000, V000000},
/* 072 | 01001000 */ {EDGE_05, EDGE_10, EDGE_06, EDGE_02, EDGE_03, EDGE_11, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 073 | 01001001 */ {EDGE_08, EDGE_02, EDGE_00, EDGE_08, EDGE_11, EDGE_02, EDGE_06, EDGE_05, EDGE_10, V000000, V000000, V000000, V000000, V000000, V000000},
/* 074 | 01001010 */ {EDGE_11, EDGE_02, EDGE_03, EDGE_01, EDGE_09, EDGE_00, EDGE_04, EDGE_10, EDGE_06, V000000, V000000, V000000, V000000, V000000, V000000},
/* 075 | 01001011 */ {EDGE_01, EDGE_11, EDGE_02, EDGE_01, EDGE_09, EDGE_11, EDGE_09, EDGE_08, EDGE_11, EDGE_02, EDGE_05, EDGE_10, V000000, V000000, V000000},
/* 076 | 01001100 */ {EDGE_06, EDGE_03, EDGE_11, EDGE_06, EDGE_05, EDGE_03, EDGE_05, EDGE_01, EDGE_03, V000000, V000000, V000000, V000000, V000000, V000000},
/* 077 | 01001101 */ {EDGE_01, EDGE_00, EDGE_05, EDGE_05, EDGE_00, EDGE_08, EDGE_05, EDGE_08, EDGE_06, EDGE_06, EDGE_08, EDGE_11, V000000, V000000, V000000},
/* 078 | 01001110 */ {EDGE_00, EDGE_03, EDGE_09, EDGE_09, EDGE_03, EDGE_11, EDGE_09, EDGE_11, EDGE_05, EDGE_05, EDGE_11, EDGE_06, V000000, V000000, V000000},
/* 079 | 01001111 */ {EDGE_09, EDGE_08, EDGE_11, EDGE_09, EDGE_11, EDGE_06, EDGE_05, EDGE_09, EDGE_06, V000000, V000000, V000000, V000000, V000000, V000000},
/* 080 | 01010000 */ {EDGE_08, EDGE_04, EDGE_07, EDGE_05, EDGE_10, EDGE_06, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 081 | 01010001 */ {EDGE_00, EDGE_07, EDGE_03, EDGE_00, EDGE_04, EDGE_07, EDGE_05, EDGE_10, EDGE_06, V000000, V000000, V000000, V000000, V000000, V000000},
/* 082 | 01010010 */ {EDGE_08, EDGE_04, EDGE_07, EDGE_05, EDGE_10, EDGE_06, EDGE_02, EDGE_09, EDGE_00, V000000, V000000, V000000, V000000, V000000, V000000},
/* 083 | 01010011 */ {EDGE_04, EDGE_01, EDGE_09, EDGE_04, EDGE_07, EDGE_01, EDGE_07, EDGE_03, EDGE_01, EDGE_09, EDGE_06, EDGE_05, V000000, V000000, V000000},
/* 084 | 01010100 */ {EDGE_02, EDGE_05, EDGE_01, EDGE_02, EDGE_06, EDGE_05, EDGE_07, EDGE_08, EDGE_04, V000000, V000000, V000000, V000000, V000000, V000000},
/* 085 | 01010101 */ {EDGE_00, EDGE_07, EDGE_03, EDGE_00, EDGE_04, EDGE_07, EDGE_01, EDGE_02, EDGE_06, EDGE_01, EDGE_06, EDGE_05, V000000, V000000, V000000},
/* 086 | 01010110 */ {EDGE_09, EDGE_06, EDGE_05, EDGE_09, EDGE_00, EDGE_06, EDGE_00, EDGE_02, EDGE_06, EDGE_05, EDGE_08, EDGE_04, V000000, V000000, V000000},
/* 087 | 01010111 */ {EDGE_04, EDGE_00, EDGE_09, EDGE_09, EDGE_00, EDGE_03, EDGE_09, EDGE_03, EDGE_02, EDGE_09, EDGE_02, EDGE_06, EDGE_09, EDGE_06, EDGE_05},
/* 088 | 01011000 */ {EDGE_10, EDGE_06, EDGE_05, EDGE_07, EDGE_08, EDGE_04, EDGE_00, EDGE_11, EDGE_02, V000000, V000000, V000000, V000000, V000000, V000000},
/* 089 | 01011001 */ {EDGE_11, EDGE_04, EDGE_07, EDGE_11, EDGE_02, EDGE_04, EDGE_02, EDGE_00, EDGE_04, EDGE_07, EDGE_10, EDGE_06, V000000, V000000, V000000},
/* 090 | 01011010 */ {EDGE_08, EDGE_04, EDGE_07, EDGE_05, EDGE_10, EDGE_06, EDGE_01, EDGE_09, EDGE_00, EDGE_02, EDGE_03, EDGE_11, V000000, V000000, V000000},
/* 091 | 01011011 */ {EDGE_10, EDGE_06, EDGE_05, EDGE_02, EDGE_01, EDGE_11, EDGE_11, EDGE_01, EDGE_09, EDGE_11, EDGE_09, EDGE_07, EDGE_07, EDGE_09, EDGE_04},
/* 092 | 01011100 */ {EDGE_06, EDGE_03, EDGE_11, EDGE_06, EDGE_05, EDGE_03, EDGE_05, EDGE_01, EDGE_03, EDGE_11, EDGE_04, EDGE_07, V000000, V000000, V000000},
/* 093 | 01011101 */ {EDGE_06, EDGE_02, EDGE_11, EDGE_11, EDGE_02, EDGE_01, EDGE_11, EDGE_01, EDGE_00, EDGE_11, EDGE_00, EDGE_04, EDGE_11, EDGE_04, EDGE_07},
/* 094 | 01011110 */ {EDGE_08, EDGE_04, EDGE_07, EDGE_00, EDGE_03, EDGE_09, EDGE_09, EDGE_03, EDGE_11, EDGE_09, EDGE_11, EDGE_05, EDGE_05, EDGE_11, EDGE_06},
/* 095 | 01011111 */ {EDGE_06, EDGE_02, EDGE_11, EDGE_02, EDGE_09, EDGE_11, EDGE_09, EDGE_04, EDGE_11, EDGE_11, EDGE_04, EDGE_07, V000000, V000000, V000000},
/* 096 | 01100000 */ {EDGE_09, EDGE_06, EDGE_04, EDGE_09, EDGE_10, EDGE_06, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 097 | 01100001 */ {EDGE_06, EDGE_09, EDGE_10, EDGE_06, EDGE_04, EDGE_09, EDGE_08, EDGE_03, EDGE_00, V000000, V000000, V000000, V000000, V000000, V000000},
/* 098 | 01100010 */ {EDGE_10, EDGE_00, EDGE_01, EDGE_10, EDGE_06, EDGE_00, EDGE_06, EDGE_04, EDGE_00, V000000, V000000, V000000, V000000, V000000, V000000},
/* 099 | 01100011 */ {EDGE_04, EDGE_08, EDGE_06, EDGE_06, EDGE_08, EDGE_03, EDGE_06, EDGE_03, EDGE_10, EDGE_10, EDGE_03, EDGE_01, V000000, V000000, V000000},
/* 100 | 01100100 */ {EDGE_01, EDGE_04, EDGE_09, EDGE_01, EDGE_02, EDGE_04, EDGE_02, EDGE_06, EDGE_04, V000000, V000000, V000000, V000000, V000000, V000000},
/* 101 | 01100101 */ {EDGE_01, EDGE_04, EDGE_09, EDGE_01, EDGE_02, EDGE_04, EDGE_02, EDGE_06, EDGE_04, EDGE_09, EDGE_03, EDGE_00, V000000, V000000, V000000},
/* 102 | 01100110 */ {EDGE_06, EDGE_04, EDGE_02, EDGE_02, EDGE_04, EDGE_00, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 103 | 01100111 */ {EDGE_08, EDGE_02, EDGE_03, EDGE_08, EDGE_04, EDGE_02, EDGE_04, EDGE_06, EDGE_02, V000000, V000000, V000000, V000000, V000000, V000000},
/* 104 | 01101000 */ {EDGE_09, EDGE_06, EDGE_04, EDGE_09, EDGE_10, EDGE_06, EDGE_02, EDGE_03, EDGE_11, V000000, V000000, V000000, V000000, V000000, V000000},
/* 105 | 01101001 */ {EDGE_02, EDGE_08, EDGE_11, EDGE_02, EDGE_00, EDGE_08, EDGE_10, EDGE_06, EDGE_04, EDGE_10, EDGE_04, EDGE_09, V000000, V000000, V000000},
/* 106 | 01101010 */ {EDGE_10, EDGE_00, EDGE_01, EDGE_10, EDGE_06, EDGE_00, EDGE_06, EDGE_04, EDGE_00, EDGE_01, EDGE_11, EDGE_02, V000000, V000000, V000000},
/* 107 | 01101011 */ {EDGE_10, EDGE_09, EDGE_01, EDGE_01, EDGE_09, EDGE_04, EDGE_01, EDGE_04, EDGE_08, EDGE_01, EDGE_08, EDGE_11, EDGE_01, EDGE_11, EDGE_02},
/* 108 | 01101100 */ {EDGE_03, EDGE_09, EDGE_01, EDGE_03, EDGE_04, EDGE_09, EDGE_03, EDGE_11, EDGE_04, EDGE_11, EDGE_06, EDGE_04, V000000, V000000, V000000},
/* 109 | 01101101 */ {EDGE_00, EDGE_02, EDGE_01, EDGE_01, EDGE_02, EDGE_11, EDGE_01, EDGE_11, EDGE_06, EDGE_01, EDGE_06, EDGE_04, EDGE_01, EDGE_04, EDGE_09},
/* 110 | 01101110 */ {EDGE_06, EDGE_04, EDGE_00, EDGE_06, EDGE_00, EDGE_03, EDGE_11, EDGE_06, EDGE_03, V000000, V000000, V000000, V000000, V000000, V000000},
/* 111 | 01101111 */ {EDGE_11, EDGE_06, EDGE_04, EDGE_08, EDGE_11, EDGE_04, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 112 | 01110000 */ {EDGE_07, EDGE_10, EDGE_06, EDGE_07, EDGE_08, EDGE_10, EDGE_08, EDGE_09, EDGE_10, V000000, V000000, V000000, V000000, V000000, V000000},
/* 113 | 01110001 */ {EDGE_10, EDGE_00, EDGE_09, EDGE_10, EDGE_03, EDGE_00, EDGE_10, EDGE_06, EDGE_03, EDGE_06, EDGE_07, EDGE_03, V000000, V000000, V000000},
/* 114 | 01110010 */ {EDGE_06, EDGE_07, EDGE_10, EDGE_10, EDGE_07, EDGE_08, EDGE_10, EDGE_08, EDGE_01, EDGE_01, EDGE_08, EDGE_00, V000000, V000000, V000000},
/* 115 | 01110011 */ {EDGE_07, EDGE_03, EDGE_01, EDGE_07, EDGE_01, EDGE_10, EDGE_06, EDGE_07, EDGE_10, V000000, V000000, V000000, V000000, V000000, V000000},
/* 116 | 01110100 */ {EDGE_06, EDGE_07, EDGE_02, EDGE_02, EDGE_07, EDGE_08, EDGE_02, EDGE_08, EDGE_01, EDGE_01, EDGE_08, EDGE_09, V000000, V000000, V000000},
/* 117 | 01110101 */ {EDGE_01, EDGE_05, EDGE_09, EDGE_09, EDGE_05, EDGE_06, EDGE_09, EDGE_06, EDGE_07, EDGE_09, EDGE_07, EDGE_03, EDGE_09, EDGE_03, EDGE_00},
/* 118 | 01110110 */ {EDGE_00, EDGE_02, EDGE_06, EDGE_00, EDGE_06, EDGE_07, EDGE_08, EDGE_00, EDGE_07, V000000, V000000, V000000, V000000, V000000, V000000},
/* 119 | 01110111 */ {EDGE_03, EDGE_02, EDGE_06, EDGE_07, EDGE_03, EDGE_06, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 120 | 01111000 */ {EDGE_07, EDGE_10, EDGE_06, EDGE_07, EDGE_08, EDGE_10, EDGE_08, EDGE_09, EDGE_10, EDGE_06, EDGE_03, EDGE_11, V000000, V000000, V000000},
/* 121 | 01111001 */ {EDGE_11, EDGE_08, EDGE_07, EDGE_07, EDGE_08, EDGE_00, EDGE_07, EDGE_00, EDGE_09, EDGE_07, EDGE_09, EDGE_10, EDGE_07, EDGE_10, EDGE_06},
/* 122 | 01111010 */ {EDGE_11, EDGE_02, EDGE_03, EDGE_06, EDGE_07, EDGE_10, EDGE_10, EDGE_07, EDGE_08, EDGE_10, EDGE_08, EDGE_01, EDGE_01, EDGE_08, EDGE_00},
/* 123 | 01111011 */ {EDGE_10, EDGE_09, EDGE_01, EDGE_09, EDGE_07, EDGE_01, EDGE_07, EDGE_11, EDGE_01, EDGE_01, EDGE_11, EDGE_02, V000000, V000000, V000000},
/* 124 | 01111100 */ {EDGE_07, EDGE_05, EDGE_06, EDGE_06, EDGE_05, EDGE_09, EDGE_06, EDGE_09, EDGE_01, EDGE_06, EDGE_01, EDGE_03, EDGE_06, EDGE_03, EDGE_11},
/* 125 | 01111101 */ {EDGE_00, EDGE_09, EDGE_01, EDGE_11, EDGE_06, EDGE_07, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 126 | 01111110 */ {EDGE_03, EDGE_01, EDGE_00, EDGE_01, EDGE_06, EDGE_00, EDGE_06, EDGE_07, EDGE_00, EDGE_00, EDGE_07, EDGE_08, V000000, V000000, V000000},
/* 127 | 01111111 */ {EDGE_11, EDGE_06, EDGE_07, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 128 | 10000000 */ {EDGE_07, EDGE_06, EDGE_11, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 129 | 10000001 */ {EDGE_06, EDGE_11, EDGE_07, EDGE_03, EDGE_00, EDGE_08, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 130 | 10000010 */ {EDGE_07, EDGE_06, EDGE_11, EDGE_01, EDGE_09, EDGE_00, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 131 | 10000011 */ {EDGE_09, EDGE_03, EDGE_01, EDGE_09, EDGE_08, EDGE_03, EDGE_07, EDGE_06, EDGE_11, V000000, V000000, V000000, V000000, V000000, V000000},
/* 132 | 10000100 */ {EDGE_07, EDGE_06, EDGE_11, EDGE_10, EDGE_01, EDGE_02, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 133 | 10000101 */ {EDGE_01, EDGE_02, EDGE_10, EDGE_11, EDGE_07, EDGE_06, EDGE_04, EDGE_03, EDGE_00, V000000, V000000, V000000, V000000, V000000, V000000},
/* 134 | 10000110 */ {EDGE_00, EDGE_10, EDGE_09, EDGE_00, EDGE_02, EDGE_10, EDGE_11, EDGE_07, EDGE_06, V000000, V000000, V000000, V000000, V000000, V000000},
/* 135 | 10000111 */ {EDGE_02, EDGE_08, EDGE_03, EDGE_02, EDGE_10, EDGE_08, EDGE_10, EDGE_09, EDGE_08, EDGE_03, EDGE_06, EDGE_11, V000000, V000000, V000000},
/* 136 | 10001000 */ {EDGE_06, EDGE_03, EDGE_07, EDGE_06, EDGE_02, EDGE_03, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 137 | 10001001 */ {EDGE_07, EDGE_00, EDGE_08, EDGE_07, EDGE_06, EDGE_00, EDGE_06, EDGE_02, EDGE_00, V000000, V000000, V000000, V000000, V000000, V000000},
/* 138 | 10001010 */ {EDGE_06, EDGE_03, EDGE_07, EDGE_06, EDGE_02, EDGE_03, EDGE_01, EDGE_09, EDGE_00, V000000, V000000, V000000, V000000, V000000, V000000},
/* 139 | 10001011 */ {EDGE_02, EDGE_01, EDGE_06, EDGE_06, EDGE_01, EDGE_09, EDGE_06, EDGE_09, EDGE_07, EDGE_07, EDGE_09, EDGE_08, V000000, V000000, V000000},
/* 140 | 10001100 */ {EDGE_10, EDGE_07, EDGE_06, EDGE_10, EDGE_01, EDGE_07, EDGE_01, EDGE_03, EDGE_07, V000000, V000000, V000000, V000000, V000000, V000000},
/* 141 | 10001101 */ {EDGE_06, EDGE_10, EDGE_07, EDGE_07, EDGE_10, EDGE_01, EDGE_07, EDGE_01, EDGE_08, EDGE_08, EDGE_01, EDGE_00, V000000, V000000, V000000},
/* 142 | 10001110 */ {EDGE_09, EDGE_06, EDGE_10, EDGE_09, EDGE_07, EDGE_06, EDGE_09, EDGE_00, EDGE_07, EDGE_00, EDGE_03, EDGE_07, V000000, V000000, V000000},
/* 143 | 10001111 */ {EDGE_10, EDGE_09, EDGE_08, EDGE_10, EDGE_08, EDGE_07, EDGE_06, EDGE_10, EDGE_07, V000000, V000000, V000000, V000000, V000000, V000000},
/* 144 | 10010000 */ {EDGE_04, EDGE_11, EDGE_08, EDGE_04, EDGE_06, EDGE_11, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 145 | 10010001 */ {EDGE_03, EDGE_06, EDGE_11, EDGE_03, EDGE_00, EDGE_06, EDGE_00, EDGE_04, EDGE_06, V000000, V000000, V000000, V000000, V000000, V000000},
/* 146 | 10010010 */ {EDGE_11, EDGE_04, EDGE_06, EDGE_11, EDGE_08, EDGE_04, EDGE_00, EDGE_01, EDGE_09, V000000, V000000, V000000, V000000, V000000, V000000},
/* 147 | 10010011 */ {EDGE_01, EDGE_11, EDGE_03, EDGE_01, EDGE_06, EDGE_11, EDGE_01, EDGE_09, EDGE_06, EDGE_09, EDGE_04, EDGE_06, V000000, V000000, V000000},
/* 148 | 10010100 */ {EDGE_04, EDGE_11, EDGE_08, EDGE_04, EDGE_06, EDGE_11, EDGE_10, EDGE_01, EDGE_02, V000000, V000000, V000000, V000000, V000000, V000000},
/* 149 | 10010101 */ {EDGE_03, EDGE_06, EDGE_11, EDGE_03, EDGE_00, EDGE_06, EDGE_00, EDGE_04, EDGE_06, EDGE_11, EDGE_01, EDGE_02, V000000, V000000, V000000},
/* 150 | 10010110 */ {EDGE_04, EDGE_11, EDGE_08, EDGE_04, EDGE_06, EDGE_11, EDGE_09, EDGE_00, EDGE_02, EDGE_09, EDGE_02, EDGE_10, V000000, V000000, V000000},
/* 151 | 10010111 */ {EDGE_02, EDGE_00, EDGE_03, EDGE_03, EDGE_00, EDGE_09, EDGE_03, EDGE_09, EDGE_04, EDGE_03, EDGE_04, EDGE_06, EDGE_03, EDGE_06, EDGE_11},
/* 152 | 10011000 */ {EDGE_08, EDGE_02, EDGE_03, EDGE_08, EDGE_04, EDGE_02, EDGE_04, EDGE_06, EDGE_02, V000000, V000000, V000000, V000000, V000000, V000000},
/* 153 | 10011001 */ {EDGE_04, EDGE_06, EDGE_00, EDGE_00, EDGE_06, EDGE_02, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 154 | 10011010 */ {EDGE_08, EDGE_02, EDGE_03, EDGE_08, EDGE_04, EDGE_02, EDGE_04, EDGE_06, EDGE_02, EDGE_03, EDGE_09, EDGE_00, V000000, V000000, V000000},
/* 155 | 10011011 */ {EDGE_04, EDGE_06, EDGE_02, EDGE_04, EDGE_02, EDGE_01, EDGE_09, EDGE_04, EDGE_01, V000000, V000000, V000000, V000000, V000000, V000000},
/* 156 | 10011100 */ {EDGE_06, EDGE_10, EDGE_04, EDGE_04, EDGE_10, EDGE_01, EDGE_04, EDGE_01, EDGE_08, EDGE_08, EDGE_01, EDGE_03, V000000, V000000, V000000},
/* 157 | 10011101 */ {EDGE_00, EDGE_04, EDGE_06, EDGE_00, EDGE_06, EDGE_10, EDGE_01, EDGE_00, EDGE_10, V000000, V000000, V000000, V000000, V000000, V000000},
/* 158 | 10011110 */ {EDGE_08, EDGE_11, EDGE_03, EDGE_03, EDGE_11, EDGE_06, EDGE_03, EDGE_06, EDGE_10, EDGE_03, EDGE_10, EDGE_09, EDGE_03, EDGE_09, EDGE_00},
/* 159 | 10011111 */ {EDGE_06, EDGE_10, EDGE_09, EDGE_04, EDGE_06, EDGE_09, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 160 | 10100000 */ {EDGE_09, EDGE_05, EDGE_04, EDGE_06, EDGE_11, EDGE_07, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 161 | 10100001 */ {EDGE_05, EDGE_04, EDGE_09, EDGE_08, EDGE_03, EDGE_00, EDGE_02, EDGE_07, EDGE_06, V000000, V000000, V000000, V000000, V000000, V000000},
/* 162 | 10100010 */ {EDGE_01, EDGE_04, EDGE_00, EDGE_01, EDGE_05, EDGE_04, EDGE_06, EDGE_11, EDGE_07, V000000, V000000, V000000, V000000, V000000, V000000},
/* 163 | 10100011 */ {EDGE_08, EDGE_05, EDGE_04, EDGE_08, EDGE_03, EDGE_05, EDGE_03, EDGE_01, EDGE_05, EDGE_04, EDGE_11, EDGE_07, V000000, V000000, V000000},
/* 164 | 10100100 */ {EDGE_07, EDGE_06, EDGE_11, EDGE_10, EDGE_01, EDGE_02, EDGE_00, EDGE_05, EDGE_04, V000000, V000000, V000000, V000000, V000000, V000000},
/* 165 | 10100101 */ {EDGE_03, EDGE_00, EDGE_08, EDGE_09, EDGE_05, EDGE_04, EDGE_10, EDGE_01, EDGE_02, EDGE_06, EDGE_11, EDGE_07, V000000, V000000, V000000},
/* 166 | 10100110 */ {EDGE_05, EDGE_02, EDGE_10, EDGE_05, EDGE_04, EDGE_02, EDGE_04, EDGE_00, EDGE_02, EDGE_10, EDGE_07, EDGE_06, V000000, V000000, V000000},
/* 167 | 10100111 */ {EDGE_07, EDGE_06, EDGE_11, EDGE_04, EDGE_08, EDGE_05, EDGE_05, EDGE_08, EDGE_03, EDGE_05, EDGE_03, EDGE_10, EDGE_10, EDGE_03, EDGE_02},
/* 168 | 10101000 */ {EDGE_03, EDGE_06, EDGE_02, EDGE_03, EDGE_07, EDGE_06, EDGE_04, EDGE_09, EDGE_05, V000000, V000000, V000000, V000000, V000000, V000000},
/* 169 | 10101001 */ {EDGE_07, EDGE_00, EDGE_08, EDGE_07, EDGE_06, EDGE_00, EDGE_06, EDGE_02, EDGE_00, EDGE_08, EDGE_05, EDGE_04, V000000, V000000, V000000},
/* 170 | 10101010 */ {EDGE_06, EDGE_03, EDGE_07, EDGE_06, EDGE_02, EDGE_03, EDGE_05, EDGE_04, EDGE_00, EDGE_05, EDGE_00, EDGE_01, V000000, V000000, V000000},
/* 171 | 10101011 */ {EDGE_07, EDGE_03, EDGE_08, EDGE_08, EDGE_03, EDGE_02, EDGE_08, EDGE_02, EDGE_01, EDGE_08, EDGE_01, EDGE_05, EDGE_08, EDGE_05, EDGE_04},
/* 172 | 10101100 */ {EDGE_10, EDGE_07, EDGE_06, EDGE_10, EDGE_01, EDGE_07, EDGE_01, EDGE_03, EDGE_07, EDGE_06, EDGE_09, EDGE_05, V000000, V000000, V000000},
/* 173 | 10101101 */ {EDGE_05, EDGE_04, EDGE_09, EDGE_06, EDGE_10, EDGE_07, EDGE_07, EDGE_10, EDGE_01, EDGE_07, EDGE_01, EDGE_08, EDGE_08, EDGE_01, EDGE_00},
/* 174 | 10101110 */ {EDGE_05, EDGE_01, EDGE_10, EDGE_10, EDGE_01, EDGE_00, EDGE_10, EDGE_00, EDGE_03, EDGE_10, EDGE_03, EDGE_07, EDGE_10, EDGE_07, EDGE_06},
/* 175 | 10101111 */ {EDGE_05, EDGE_01, EDGE_10, EDGE_01, EDGE_08, EDGE_10, EDGE_08, EDGE_07, EDGE_10, EDGE_10, EDGE_07, EDGE_06, V000000, V000000, V000000},
/* 176 | 10110000 */ {EDGE_06, EDGE_09, EDGE_05, EDGE_06, EDGE_11, EDGE_09, EDGE_11, EDGE_08, EDGE_09, V000000, V000000, V000000, V000000, V000000, V000000},
/* 177 | 10110001 */ {EDGE_00, EDGE_09, EDGE_03, EDGE_03, EDGE_09, EDGE_05, EDGE_03, EDGE_05, EDGE_11, EDGE_11, EDGE_05, EDGE_06, V000000, V000000, V000000},
/* 178 | 10110010 */ {EDGE_05, EDGE_06, EDGE_01, EDGE_01, EDGE_06, EDGE_11, EDGE_01, EDGE_11, EDGE_00, EDGE_00, EDGE_11, EDGE_08, V000000, V000000, V000000},
/* 179 | 10110011 */ {EDGE_03, EDGE_01, EDGE_05, EDGE_03, EDGE_05, EDGE_06, EDGE_11, EDGE_03, EDGE_06, V000000, V000000, V000000, V000000, V000000, V000000},
/* 180 | 10110100 */ {EDGE_06, EDGE_09, EDGE_05, EDGE_06, EDGE_11, EDGE_09, EDGE_11, EDGE_08, EDGE_09, EDGE_05, EDGE_02, EDGE_10, V000000, V000000, V000000},
/* 181 | 10110101 */ {EDGE_01, EDGE_02, EDGE_10, EDGE_00, EDGE_09, EDGE_03, EDGE_03, EDGE_09, EDGE_05, EDGE_03, EDGE_05, EDGE_11, EDGE_11, EDGE_05, EDGE_06},
/* 182 | 10110110 */ {EDGE_06, EDGE_04, EDGE_05, EDGE_05, EDGE_04, EDGE_08, EDGE_05, EDGE_08, EDGE_00, EDGE_05, EDGE_00, EDGE_02, EDGE_05, EDGE_02, EDGE_10},
/* 183 | 10110111 */ {EDGE_02, EDGE_00, EDGE_03, EDGE_00, EDGE_05, EDGE_03, EDGE_05, EDGE_06, EDGE_03, EDGE_03, EDGE_06, EDGE_11, V000000, V000000, V000000},
/* 184 | 10111000 */ {EDGE_09, EDGE_03, EDGE_08, EDGE_09, EDGE_02, EDGE_03, EDGE_09, EDGE_05, EDGE_02, EDGE_05, EDGE_06, EDGE_02, V000000, V000000, V000000},
/* 185 | 10111001 */ {EDGE_06, EDGE_02, EDGE_00, EDGE_06, EDGE_00, EDGE_09, EDGE_05, EDGE_06, EDGE_09, V000000, V000000, V000000, V000000, V000000, V000000},
/* 186 | 10111010 */ {EDGE_00, EDGE_04, EDGE_08, EDGE_08, EDGE_04, EDGE_05, EDGE_08, EDGE_05, EDGE_06, EDGE_08, EDGE_06, EDGE_02, EDGE_08, EDGE_02, EDGE_03},
/* 187 | 10111011 */ {EDGE_02, EDGE_01, EDGE_05, EDGE_06, EDGE_02, EDGE_05, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 188 | 10111100 */ {EDGE_10, EDGE_11, EDGE_06, EDGE_06, EDGE_11, EDGE_03, EDGE_06, EDGE_03, EDGE_08, EDGE_06, EDGE_08, EDGE_09, EDGE_06, EDGE_09, EDGE_05},
/* 189 | 10111101 */ {EDGE_10, EDGE_11, EDGE_06, EDGE_11, EDGE_00, EDGE_06, EDGE_00, EDGE_09, EDGE_06, EDGE_06, EDGE_09, EDGE_05, V000000, V000000, V000000},
/* 190 | 10111110 */ {EDGE_06, EDGE_10, EDGE_05, EDGE_08, EDGE_00, EDGE_03, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 191 | 10111111 */ {EDGE_06, EDGE_10, EDGE_05, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 192 | 11000000 */ {EDGE_07, EDGE_10, EDGE_11, EDGE_07, EDGE_05, EDGE_10, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 193 | 11000001 */ {EDGE_10, EDGE_07, EDGE_05, EDGE_10, EDGE_11, EDGE_07, EDGE_03, EDGE_00, EDGE_08, V000000, V000000, V000000, V000000, V000000, V000000},
/* 194 | 11000010 */ {EDGE_07, EDGE_10, EDGE_11, EDGE_07, EDGE_05, EDGE_10, EDGE_09, EDGE_00, EDGE_01, V000000, V000000, V000000, V000000, V000000, V000000},
/* 195 | 11000011 */ {EDGE_03, EDGE_09, EDGE_08, EDGE_03, EDGE_01, EDGE_09, EDGE_11, EDGE_07, EDGE_05, EDGE_11, EDGE_05, EDGE_10, V000000, V000000, V000000},
/* 196 | 11000100 */ {EDGE_11, EDGE_01, EDGE_02, EDGE_11, EDGE_07, EDGE_01, EDGE_07, EDGE_05, EDGE_01, V000000, V000000, V000000, V000000, V000000, V000000},
/* 197 | 11000101 */ {EDGE_11, EDGE_01, EDGE_02, EDGE_11, EDGE_07, EDGE_01, EDGE_07, EDGE_05, EDGE_01, EDGE_02, EDGE_08, EDGE_03, V000000, V000000, V000000},
/* 198 | 11000110 */ {EDGE_02, EDGE_11, EDGE_00, EDGE_00, EDGE_11, EDGE_07, EDGE_00, EDGE_07, EDGE_09, EDGE_09, EDGE_07, EDGE_05, V000000, V000000, V000000},
/* 199 | 11000111 */ {EDGE_11, EDGE_10, EDGE_02, EDGE_02, EDGE_10, EDGE_05, EDGE_02, EDGE_05, EDGE_09, EDGE_02, EDGE_09, EDGE_08, EDGE_02, EDGE_08, EDGE_03},
/* 200 | 11001000 */ {EDGE_02, EDGE_05, EDGE_10, EDGE_02, EDGE_03, EDGE_05, EDGE_03, EDGE_07, EDGE_05, V000000, V000000, V000000, V000000, V000000, V000000},
/* 201 | 11001001 */ {EDGE_05, EDGE_08, EDGE_07, EDGE_05, EDGE_00, EDGE_08, EDGE_05, EDGE_10, EDGE_00, EDGE_10, EDGE_02, EDGE_00, V000000, V000000, V000000},
/* 202 | 11001010 */ {EDGE_02, EDGE_05, EDGE_10, EDGE_02, EDGE_03, EDGE_05, EDGE_03, EDGE_07, EDGE_05, EDGE_10, EDGE_00, EDGE_01, V000000, V000000, V000000},
/* 203 | 11001011 */ {EDGE_01, EDGE_03, EDGE_02, EDGE_02, EDGE_03, EDGE_08, EDGE_02, EDGE_08, EDGE_07, EDGE_02, EDGE_07, EDGE_05, EDGE_02, EDGE_05, EDGE_10},
/* 204 | 11001100 */ {EDGE_01, EDGE_03, EDGE_05, EDGE_05, EDGE_03, EDGE_07, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 205 | 11001101 */ {EDGE_07, EDGE_05, EDGE_01, EDGE_07, EDGE_01, EDGE_00, EDGE_08, EDGE_07, EDGE_00, V000000, V000000, V000000, V000000, V000000, V000000},
/* 206 | 11001110 */ {EDGE_03, EDGE_07, EDGE_05, EDGE_03, EDGE_05, EDGE_09, EDGE_00, EDGE_03, EDGE_09, V000000, V000000, V000000, V000000, V000000, V000000},
/* 207 | 11001111 */ {EDGE_05, EDGE_09, EDGE_08, EDGE_07, EDGE_05, EDGE_08, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 208 | 11010000 */ {EDGE_05, EDGE_08, EDGE_04, EDGE_05, EDGE_10, EDGE_08, EDGE_10, EDGE_11, EDGE_08, V000000, V000000, V000000, V000000, V000000, V000000},
/* 209 | 11010001 */ {EDGE_04, EDGE_05, EDGE_00, EDGE_00, EDGE_05, EDGE_10, EDGE_00, EDGE_10, EDGE_03, EDGE_03, EDGE_10, EDGE_11, V000000, V000000, V000000},
/* 210 | 11010010 */ {EDGE_05, EDGE_08, EDGE_04, EDGE_05, EDGE_10, EDGE_08, EDGE_10, EDGE_11, EDGE_08, EDGE_04, EDGE_01, EDGE_09, V000000, V000000, V000000},
/* 211 | 11010011 */ {EDGE_05, EDGE_07, EDGE_04, EDGE_04, EDGE_07, EDGE_11, EDGE_04, EDGE_11, EDGE_03, EDGE_04, EDGE_03, EDGE_01, EDGE_04, EDGE_01, EDGE_09},
/* 212 | 11010100 */ {EDGE_01, EDGE_04, EDGE_05, EDGE_01, EDGE_08, EDGE_04, EDGE_01, EDGE_02, EDGE_08, EDGE_02, EDGE_11, EDGE_08, V000000, V000000, V000000},
/* 213 | 11010101 */ {EDGE_03, EDGE_07, EDGE_11, EDGE_11, EDGE_07, EDGE_04, EDGE_11, EDGE_04, EDGE_05, EDGE_11, EDGE_05, EDGE_01, EDGE_11, EDGE_01, EDGE_02},
/* 214 | 11010110 */ {EDGE_09, EDGE_10, EDGE_05, EDGE_05, EDGE_10, EDGE_02, EDGE_05, EDGE_02, EDGE_11, EDGE_05, EDGE_11, EDGE_08, EDGE_05, EDGE_08, EDGE_04},
/* 215 | 11010111 */ {EDGE_04, EDGE_05, EDGE_09, EDGE_03, EDGE_02, EDGE_11, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 216 | 11011000 */ {EDGE_04, EDGE_05, EDGE_08, EDGE_08, EDGE_05, EDGE_10, EDGE_08, EDGE_10, EDGE_03, EDGE_03, EDGE_10, EDGE_02, V000000, V000000, V000000},
/* 217 | 11011001 */ {EDGE_02, EDGE_00, EDGE_04, EDGE_02, EDGE_04, EDGE_05, EDGE_10, EDGE_02, EDGE_05, V000000, V000000, V000000, V000000, V000000, V000000},
/* 218 | 11011010 */ {EDGE_09, EDGE_00, EDGE_01, EDGE_04, EDGE_05, EDGE_08, EDGE_08, EDGE_05, EDGE_10, EDGE_08, EDGE_10, EDGE_03, EDGE_03, EDGE_10, EDGE_02},
/* 219 | 11011011 */ {EDGE_05, EDGE_07, EDGE_04, EDGE_07, EDGE_02, EDGE_04, EDGE_02, EDGE_01, EDGE_04, EDGE_04, EDGE_01, EDGE_09, V000000, V000000, V000000},
/* 220 | 11011100 */ {EDGE_05, EDGE_01, EDGE_03, EDGE_05, EDGE_03, EDGE_08, EDGE_04, EDGE_05, EDGE_08, V000000, V000000, V000000, V000000, V000000, V000000},
/* 221 | 11011101 */ {EDGE_04, EDGE_05, EDGE_01, EDGE_00, EDGE_04, EDGE_01, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 222 | 11011110 */ {EDGE_09, EDGE_10, EDGE_05, EDGE_10, EDGE_03, EDGE_05, EDGE_03, EDGE_08, EDGE_05, EDGE_05, EDGE_08, EDGE_04, V000000, V000000, V000000},
/* 223 | 11011111 */ {EDGE_04, EDGE_05, EDGE_09, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 224 | 11100000 */ {EDGE_04, EDGE_11, EDGE_07, EDGE_04, EDGE_09, EDGE_11, EDGE_09, EDGE_10, EDGE_11, V000000, V000000, V000000, V000000, V000000, V000000},
/* 225 | 11100001 */ {EDGE_04, EDGE_11, EDGE_07, EDGE_04, EDGE_09, EDGE_11, EDGE_09, EDGE_10, EDGE_11, EDGE_07, EDGE_00, EDGE_08, V000000, V000000, V000000},
/* 226 | 11100010 */ {EDGE_11, EDGE_01, EDGE_10, EDGE_11, EDGE_00, EDGE_01, EDGE_11, EDGE_07, EDGE_00, EDGE_07, EDGE_04, EDGE_00, V000000, V000000, V000000},
/* 227 | 11100011 */ {EDGE_08, EDGE_09, EDGE_04, EDGE_04, EDGE_09, EDGE_01, EDGE_04, EDGE_01, EDGE_10, EDGE_04, EDGE_10, EDGE_11, EDGE_04, EDGE_11, EDGE_07},
/* 228 | 11100100 */ {EDGE_02, EDGE_11, EDGE_01, EDGE_01, EDGE_11, EDGE_07, EDGE_01, EDGE_07, EDGE_09, EDGE_09, EDGE_07, EDGE_04, V000000, V000000, V000000},
/* 229 | 11100101 */ {EDGE_03, EDGE_00, EDGE_08, EDGE_02, EDGE_11, EDGE_01, EDGE_01, EDGE_11, EDGE_07, EDGE_01, EDGE_07, EDGE_09, EDGE_09, EDGE_07, EDGE_04},
/* 230 | 11100110 */ {EDGE_04, EDGE_00, EDGE_02, EDGE_04, EDGE_02, EDGE_11, EDGE_07, EDGE_04, EDGE_11, V000000, V000000, V000000, V000000, V000000, V000000},
/* 231 | 11100111 */ {EDGE_08, EDGE_09, EDGE_04, EDGE_09, EDGE_02, EDGE_04, EDGE_02, EDGE_11, EDGE_04, EDGE_04, EDGE_11, EDGE_07, V000000, V000000, V000000},
/* 232 | 11101000 */ {EDGE_10, EDGE_02, EDGE_09, EDGE_09, EDGE_02, EDGE_03, EDGE_09, EDGE_03, EDGE_04, EDGE_04, EDGE_03, EDGE_07, V000000, V000000, V000000},
/* 233 | 11101001 */ {EDGE_04, EDGE_06, EDGE_07, EDGE_07, EDGE_06, EDGE_10, EDGE_07, EDGE_10, EDGE_02, EDGE_07, EDGE_02, EDGE_00, EDGE_07, EDGE_00, EDGE_08},
/* 234 | 11101010 */ {EDGE_02, EDGE_06, EDGE_10, EDGE_10, EDGE_06, EDGE_07, EDGE_10, EDGE_07, EDGE_04, EDGE_10, EDGE_04, EDGE_00, EDGE_10, EDGE_00, EDGE_01},
/* 235 | 11101011 */ {EDGE_08, EDGE_04, EDGE_07, EDGE_10, EDGE_01, EDGE_02, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 236 | 11101100 */ {EDGE_01, EDGE_03, EDGE_07, EDGE_01, EDGE_07, EDGE_04, EDGE_09, EDGE_01, EDGE_04, V000000, V000000, V000000, V000000, V000000, V000000},
/* 237 | 11101101 */ {EDGE_04, EDGE_06, EDGE_07, EDGE_06, EDGE_01, EDGE_07, EDGE_01, EDGE_00, EDGE_07, EDGE_07, EDGE_00, EDGE_08, V000000, V000000, V000000},
/* 238 | 11101110 */ {EDGE_00, EDGE_07, EDGE_03, EDGE_00, EDGE_04, EDGE_07, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 239 | 11101111 */ {EDGE_08, EDGE_04, EDGE_07, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 240 | 11110000 */ {EDGE_10, EDGE_11, EDGE_09, EDGE_09, EDGE_11, EDGE_08, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 241 | 11110001 */ {EDGE_09, EDGE_10, EDGE_11, EDGE_09, EDGE_11, EDGE_03, EDGE_00, EDGE_09, EDGE_03, V000000, V000000, V000000, V000000, V000000, V000000},
/* 242 | 11110010 */ {EDGE_10, EDGE_11, EDGE_08, EDGE_10, EDGE_08, EDGE_00, EDGE_01, EDGE_10, EDGE_00, V000000, V000000, V000000, V000000, V000000, V000000},
/* 243 | 11110011 */ {EDGE_01, EDGE_10, EDGE_11, EDGE_03, EDGE_01, EDGE_11, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 244 | 11110100 */ {EDGE_11, EDGE_08, EDGE_09, EDGE_11, EDGE_09, EDGE_01, EDGE_02, EDGE_11, EDGE_01, V000000, V000000, V000000, V000000, V000000, V000000},
/* 245 | 11110101 */ {EDGE_01, EDGE_05, EDGE_09, EDGE_05, EDGE_11, EDGE_09, EDGE_11, EDGE_03, EDGE_09, EDGE_09, EDGE_03, EDGE_00, V000000, V000000, V000000},
/* 246 | 11110110 */ {EDGE_08, EDGE_00, EDGE_02, EDGE_11, EDGE_08, EDGE_02, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 247 | 11110111 */ {EDGE_03, EDGE_02, EDGE_11, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 248 | 11111000 */ {EDGE_08, EDGE_09, EDGE_10, EDGE_08, EDGE_10, EDGE_02, EDGE_03, EDGE_08, EDGE_02, V000000, V000000, V000000, V000000, V000000, V000000},
/* 249 | 11111001 */ {EDGE_00, EDGE_09, EDGE_10, EDGE_02, EDGE_00, EDGE_10, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 250 | 11111010 */ {EDGE_00, EDGE_04, EDGE_08, EDGE_04, EDGE_10, EDGE_08, EDGE_10, EDGE_02, EDGE_08, EDGE_08, EDGE_02, EDGE_03, V000000, V000000, V000000},
/* 251 | 11111011 */ {EDGE_02, EDGE_01, EDGE_10, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 252 | 11111100 */ {EDGE_09, EDGE_01, EDGE_03, EDGE_08, EDGE_09, EDGE_03, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 253 | 11111101 */ {EDGE_00, EDGE_09, EDGE_01, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 254 | 11111110 */ {EDGE_08, EDGE_00, EDGE_03, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000},
/* 255 | 11111111 */ {V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000, V000000}
//     indices        <-------triangle-0------>  <-------triangle-1------>  <-------triangle-2------>  <-------triangle-3------>  <-------triangle-4------>
};

//Number of voxels
#define N 8

//Bitmasks for each voxel
GLubyte marchingBitmasksData[N] = {
		0b00000001,
		0b00000010,
		0b00000100,
		0b00001000,
		0b00010000,
		0b00100000,
		0b01000000,
		0b10000000
};

//Positions of voxels
GLfloat voxelPositionsData[N][3] = {
//        X     Y     Z
		{+0.5f, +0.5f, -0.5f},
		{+0.5f, -0.5f, -0.5f},
		{-0.5f, -0.5f, -0.5f},
		{-0.5f, +0.5f, -0.5f},
		{+0.5f, +0.5f, +0.5f},
		{+0.5f, -0.5f, +0.5f},
		{-0.5f, -0.5f, +0.5f},
		{-0.5f, +0.5f, +0.5f}
};

//Colors of the voxels
GLfloat colorsData[N][4] = {
//        R     G     B     A
		{1.0f, 0.0f, 0.0f, 1.0f},
		{0.0f, 1.0f, 0.0f, 1.0f},
		{0.0f, 0.0f, 1.0f, 1.0f},
		{1.0f, 1.0f, 0.0f, 1.0f},
		{1.0f, 0.0f, 1.0f, 1.0f},
		{0.0f, 1.0f, 1.0f, 1.0f},
		{1.0f, 1.0f, 1.0f, 1.0f},
		{0.4f, 0.4f, 0.4f, 1.0f}
};

TexBuffer marchingCubes, marchingBitmasks, voxelPositions, colors;
GLint worldLoc, camLoc;
GLFWwindow* window;

int main(){
	if(!init()){
		fprintf(stderr, "ERROR: initialization failed\n");
		glfwTerminate();
		exit(EXIT_FAILURE);
	}

	double t = glfwGetTime();
	uint fps = 0;
	while(!glfwWindowShouldClose(window)){
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		render(N);

		glfwSwapBuffers(window);
		glfwPollEvents();

		double t2 = glfwGetTime();
		double dt = t2-t;
		if(dt >= 1.0f){
			printf("FPS: %i\n", fps);
			printf("Avg. TPF: %fms\n", (dt*1000/fps));
			printf("\n");
			t = t2;
			fps = 0;
		}
		fps++;
	}

	printf("KTHXBAI!");
	glfwTerminate();
	exit(EXIT_SUCCESS);
}

void render(GLint n){
	glUniformMatrix4fv(worldLoc, 1, GL_FALSE, getWorldMatrix());
	glDrawArraysInstanced(GL_TRIANGLES, 0, 15, n);
	if(printGLError()){
		fprintf(stderr, "render(): OpenGL error\n");
	}
}

int initLibs(){
	if(!glfwInit()){
		fprintf(stderr, "initLibs(): error: couldn't initialize GLFW\n");
		return 0;
	}

	window = glfwCreateWindow(640, 480, "Marching Cubes", NULL, NULL);
	if(!window){
		fprintf(stderr, "initLibs(): error: couldn't create window\n");
		return 0;
	}

	glfwMakeContextCurrent(window);

	GLenum err = glewInit();
	if(GLEW_OK != err){
		fprintf(stderr, "initLibs(): error: couldn't initialize GLEW: %s\n", glewGetErrorString(err));
		return 0;
	}

	return 1;
}

int initTexBuffer(TexBuffer* tb){
	glGenBuffers(1, &tb->buffer);
	glGenTextures(1, &tb->texture);
	if(!tb->buffer){
		fprintf(stderr, "initTexBuffer(): error: couldn't generate buffer\n");
		return 0;
	}

	glBindBuffer(GL_TEXTURE_BUFFER, tb->buffer);
	glBufferData(GL_TEXTURE_BUFFER, tb->size, tb->data, tb->usage);

	glGenTextures(1, &tb->texture);
	if(!tb->texture){
		fprintf(stderr, "initTexBuffer(): error: couldn't generate texture\n");
		return 0;
	}

	glActiveTexture(GL_TEXTURE0 + tb->textureID);
	glUniform1i(tb->location, tb->textureID);
	glBindTexture(GL_TEXTURE_BUFFER, tb->texture);
	glTexBuffer(GL_TEXTURE_BUFFER, tb->format, tb->buffer);

	if(printGLError()){
		fprintf(stderr, "initTexBuffer(): OpenGL error\n");
		return 0;
	}

	return 1;
}

int initOpenGL(){
	if(printGLError()){
		fprintf(stderr, "initOpenGL(): OpenGL error @ #00\n");
		return 0;
	}

	//Set up shaders && program
	GLuint shaders[2];
	shaders[0] = makeShader("vertex.glsl", GL_VERTEX_SHADER);
	shaders[1] = makeShader("fragment.glsl", GL_FRAGMENT_SHADER);
	GLuint program = makeProgram(shaders);
	if(!program){
		fprintf(stderr, "initOpenGL(): error: couldn't create shader program\n");
		return 0;
	}
	glUseProgram(program);

	if(printGLError()){
		fprintf(stderr, "initOpenGL(): OpenGL error @ #01\n");
		return 0;
	}

	//Misc. OpenGL settings
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	glClearDepth(1.0f);

	glDepthMask(GL_TRUE);
	glDepthFunc(GL_LEQUAL);
	glDepthRange(0.0f, 1.0f);
	glEnable(GL_DEPTH_TEST);

	glFrontFace(GL_CW);
	glCullFace(GL_BACK);
	glEnable(GL_CULL_FACE);

	//Get locations
	marchingCubes.location = glGetUniformLocation(program, "marchingCubes");
	marchingBitmasks.location = glGetUniformLocation(program, "marchingBitmasks");
	voxelPositions.location = glGetUniformLocation(program, "voxelPositions");
	colors.location = glGetUniformLocation(program, "colors");
	worldLoc = glGetUniformLocation(program, "world");
	camLoc = glGetUniformLocation(program, "cam");
	if((marchingCubes.location|marchingBitmasks.location|voxelPositions.location|colors.location|worldLoc|camLoc) < 0){
		fprintf(stderr, "initOpenGL(): error: couldn't get all shader attribute locations\n");
		fprintf(stderr, "\tmarchingCubes.location: %i\n", marchingCubes.location);
		fprintf(stderr, "\tmarchingBitmasks.location: %i\n", marchingBitmasks.location);
		fprintf(stderr, "\tvoxelPositions.location: %i\n", voxelPositions.location);
		fprintf(stderr, "\tcolors.location: %i\n", colors.location);
		fprintf(stderr, "\tworldLoc: %i\n", worldLoc);
		fprintf(stderr, "\tcamLoc: %i\n", camLoc);
		return 0;
	}

	if(printGLError()){
		fprintf(stderr, "initOpenGL(): OpenGL error @ #02\n");
		return 0;
	}

	//Set up uniforms
	GLfloat cam[3] = {0.0f, 0.0f, 0.0f};
	glUniform3f(camLoc, cam[0], cam[1], cam[2]);

	//Set up buffers
	marchingCubes.textureID = 0;
	marchingCubes.format = GL_RGB32F;
	marchingCubes.usage = GL_STATIC_DRAW;
	marchingCubes.size = sizeof(marchingCubesData);
	marchingCubes.data = &marchingCubesData;
	if(!initTexBuffer(&marchingCubes)){
		fprintf(stderr, "initOpenGL(): error: couldn't initialize marchingCubes buffer\n");
		return 0;
	}

	marchingBitmasks.textureID = 1;
	marchingBitmasks.format = GL_R8UI;
	marchingBitmasks.usage = GL_DYNAMIC_DRAW;
	marchingBitmasks.size = sizeof(marchingBitmasksData);
	marchingBitmasks.data = &marchingBitmasksData;
	if(!initTexBuffer(&marchingBitmasks)){
		fprintf(stderr, "initOpenGL(): error: couldn't initialize marchingBitmasks buffer\n");
		return 0;
	}

	voxelPositions.textureID = 2;
	voxelPositions.format = GL_RGB32F;
	voxelPositions.usage = GL_DYNAMIC_DRAW;
	voxelPositions.size = sizeof(voxelPositionsData);
	voxelPositions.data = &voxelPositionsData;
	if(!initTexBuffer(&voxelPositions)){
		fprintf(stderr, "initOpenGL(): error: couldn't initialize voxelPositions buffer\n");
		return 0;
	}

	colors.textureID = 3;
	colors.format = GL_RGBA32F;
	colors.usage = GL_DYNAMIC_DRAW;
	colors.size = sizeof(colorsData);
	colors.data = &colorsData;
	if(!initTexBuffer(&colors)){
		fprintf(stderr, "initOpenGL(): error: couldn't initialize colors buffer\n");
		return 0;
	}

	//Set up dummy VBO... stupid driver bugs
	GLint dummy[15] = {
			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	};
	GLuint vbo;
	glGenBuffers(1, &vbo);
	glBindBuffer(GL_ARRAY_BUFFER, vbo);
	glBufferData(GL_ARRAY_BUFFER, sizeof(dummy), dummy, GL_STATIC_DRAW);
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(0, 1, GL_INT, GL_FALSE, 0, 0);

	if(printGLError()){
		fprintf(stderr, "initOpenGL(): OpenGL error @ #03\n");
		return 0;
	}

	if(!validateProgram(program)){
		printProgramLog(program);
		fprintf(stderr, "initOpenGL(): error: couldn't validate program\n");
		return 0;
	}

	if(printGLError()){
		fprintf(stderr, "initOpenGL(): OpenGL error @ #04\n");
		return 0;
	}

	return 1;
}

int init(){
	if(!initLibs()){
		fprintf(stderr, "init(): error: couldn't initialize libraries\n");
		return 0;
	}

	if(!initOpenGL()){
		fprintf(stderr, "init(): error: couldn't initialize OpenGL\n");
		return 0;
	}

	return 1;
}

GLuint makeShader(const char* fileName, GLenum type){
    //Read in code from file
	FILE* f = fopen(fileName, "r");
	if(!f){
		fprintf(stderr, "makeShader(): error: couldn't open file: %s\n", fileName);
		return 0;
	}
	fseek(f, 0L, SEEK_END);
	int size = ftell(f);
	rewind(f);
	char* buffer = (char*) malloc(sizeof(char)*(size+1));
	if(!buffer){
		fprintf(stderr, "makeShader(): error: couldn't allocate memory for buffer\n");
		fclose(f);
		return 0;
	}
	if(fread(buffer, size, 1, f) != 1){
		fprintf(stderr, "makeShader(): error: couldn't read file: %s\n", fileName);
		fclose(f);
		return 0;
	}
	fclose(f);

    //Make a shader
    GLuint shader = glCreateShader(type);
    const GLchar* source = buffer;
    glShaderSource(shader, 1, &source, &size);
    glCompileShader(shader);
    free(buffer);

    //Check compiled shader
    GLint success;
    glGetShaderiv(shader, GL_COMPILE_STATUS, &success);
    if(!success){
        GLint logLen = 0;
        glGetShaderiv(shader, GL_INFO_LOG_LENGTH , &logLen);
        if(logLen >= 1){
            GLchar* log = (GLchar*) malloc(logLen);
            glGetShaderInfoLog(shader, logLen, &logLen, log);
            fprintf(stderr, "%s\n", log);
            free(log);
        }else{
        	fprintf(stderr, "makeShader(): error: couldn't compile shader\n");
        }
        return 0;
    }

    return shader;
}

GLuint makeProgram(GLuint* shaders){
	//Attach shaders
    GLuint program = glCreateProgram();
    uint c;
    for(c=0; c<(sizeof(shaders)/sizeof(GLuint)); c++){
    	if(shaders[c]==0){
    		fprintf(stderr, "makeProgram(): error: shader #%i is NULL\n", c);
    		return 0;
    	}
        glAttachShader(program, shaders[c]);
    }

    //Link program
    glLinkProgram(program);
    GLint success;
    glGetProgramiv(program, GL_LINK_STATUS, &success);
    if(!success){
    	printProgramLog(program);
        fprintf(stderr, "makeProgram(): error: couldn't link program\n");
        return 0;
    }

    return program;
}

int validateProgram(GLuint program){
	glValidateProgram(program);
	GLint success;
	glGetProgramiv(program, GL_VALIDATE_STATUS, &success);
	if(!success){
        return 0;
	}
	return 1;
}

void printProgramLog(GLuint program){
    GLint logLen = 0;
    glGetProgramiv(program, GL_INFO_LOG_LENGTH , &logLen);
    if(logLen >= 1){
        GLchar* log = (GLchar*) malloc(logLen);
        glGetProgramInfoLog(program, logLen, &logLen, log);
        fprintf(stderr, "%s\n", log);
        free(log);
    }
}

int printGLError(){
	GLenum err = glGetError();
	int ret = 0;
	while(err != GL_NO_ERROR){
		ret |= 1;
		switch(err){
			case GL_NO_ERROR: //Shouldn't ever happen
				fprintf(stderr, "OpenGL error: GL_NO_ERROR\n");
				break;
			case GL_INVALID_ENUM:
				fprintf(stderr, "OpenGL error: GL_INVALID_ENUM\n");
				break;
			case GL_INVALID_VALUE:
				fprintf(stderr, "OpenGL error: GL_INVALID_VALUE\n");
				break;
			case GL_INVALID_OPERATION:
				fprintf(stderr, "OpenGL error: GL_INVALID_OPERATION\n");
				break;
			case GL_INVALID_FRAMEBUFFER_OPERATION:
				fprintf(stderr, "OpenGL error: GL_INVALID_FRAMEBUFFER_OPERATION\n");
				break;
			case GL_OUT_OF_MEMORY:
				fprintf(stderr, "OpenGL error: GL_OUT_OF_MEMORY\n");
				break;
			case GL_STACK_UNDERFLOW:
				fprintf(stderr, "OpenGL error: GL_STACK_UNDERFLOW\n");
				break;
			case GL_STACK_OVERFLOW:
				fprintf(stderr, "OpenGL error: GL_STACK_OVERFLOW\n");
				break;
			default:
				fprintf(stderr, "OpenGL error: 0x%X\n", err);
				break;
		}
		err = glGetError();
	}
	return ret;
}

}//extern "C"

float* getWorldMatrix(){
#if 0
	mat4 projection = perspective(45.0f, 4.0f/3.0f, 1.0f, 10.0f);
	mat4 viewTranslate = translate(mat4(1.0f), vec3(0.0f, 0.0f, -r));
	mat4 viewRotateX = rotate(viewTranslate, b, vec3(-1.0f, 0.0f, 0.0f));
	mat4 view = rotate(viewRotateX, a, vec3(0.0f, 1.0f, 0.0f));
	mat4 model = mat4(1.0f);
	mat4 MVP = projection * view * model;
#elif 0
	mat4 Projection = mat4(1.0f);
	mat4 View       = lookAt(
	    vec3(0,0,5), // Camera is at (0,0,5), in World Space
	    vec3(0,0,0), // and looks at the origin
	    vec3(0,1,0)  // Head is up (set to 0,-1,0 to look upside-down)
	);
	mat4 Model      = mat4(1.0f);
	mat4 MVP        = Projection * View * Model;
#elif 1
	mat4 Projection = perspective(45.0f, 4.0f/3.0f, 1.0f, 10.0f);
	mat4 View       = lookAt(
	    vec3(0,0,5), // Camera is at (0,0,5), in World Space
	    vec3(0,0,0), // and looks at the origin
	    vec3(0,1,0)  // Head is up (set to 0,-1,0 to look upside-down)
	);
	mat4 Model      = mat4(1.0f);
	mat4 MVP        = Projection * View * Model;
#elif 0
	mat4 Projection = ortho(0.0f, 640.0f, 480.0f, 0.0f, 1.0f, 10.0f);
	mat4 View       = lookAt(
	    vec3(0,0,5), // Camera is at (0,0,5), in World Space
	    vec3(0,0,0), // and looks at the origin
	    vec3(0,1,0)  // Head is up (set to 0,-1,0 to look upside-down)
	);
	mat4 Model      = mat4(1.0f);
	mat4 MVP        = Projection * View * Model;
#endif

	return value_ptr(MVP);
}
